# TASK 4 - Machine Learning Model Implementation: Spam Email Detection using Scikit-learn

# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Step 2: Load Dataset
# Make sure to download "spam.csv" from UCI Dataset: https://archive.ics.uci.edu/ml/datasets/sms+spam+collection
df = pd.read_csv("SMSSpamCollection", sep='\t', header=None, names=['label', 'message'])

df.columns = ['label', 'message']

# Step 3: Preprocess Data
df['label_num'] = df['label'].map({'ham': 0, 'spam': 1})
X = df['message']
y = df['label_num']

# Step 4: Convert Text to Numeric Vectors
vectorizer = CountVectorizer()
X_vectorized = vectorizer.fit_transform(X)

# Step 5: Split Data into Train and Test
X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)

# Step 6: Train the Model (Multinomial Naive Bayes)
model = MultinomialNB()
model.fit(X_train, y_train)

# Step 7: Evaluate the Model
y_pred = model.predict(X_test)
print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“„ Classification Report:\n", classification_report(y_test, y_pred))
print("\nðŸ“Š Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Step 8: Try a Custom Prediction
sample = ["Congratulations! You've won a free ticket to Bahamas. Call now!"]
sample_vector = vectorizer.transform(sample)
result = model.predict(sample_vector)[0]
print("\nðŸ“© Sample Message Prediction:", "Spam" if result == 1 else "Ham")
